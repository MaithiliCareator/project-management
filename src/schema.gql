# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Role {
  id: ID!
  role: String!
  description: String
  createdat: DateTime!
  updatedat: DateTime!
  createdby: String!
  updatedby: String!
  isactive: Boolean!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type User {
  userid: String!
  email: String!
  username: String!
  passwordhash: String
  mobile: String!
  profilepicture: String!
  lastlogin: DateTime!
  usertoken: String!
  firsttimelogin: Boolean!
  updatedat: DateTime!
  createdby: String!
  updatedby: String!
  isactive: Boolean!
}

type Jwt {
  token: String!
  userid: String!
  username: String!
  email: String!
  firsttimelogin: Boolean!
}

type UserRole {
  id: ID!
  isdefault: Boolean
  userid: String
  roleid: Int
  user: User
  role: Role!
}

type Cost {
  id: ID!
  paidamount: Float
  paiddate: DateTime
  projectId: Float
  project: Project
}

type Timesheet {
  id: ID!
  workinghours: Float
  workingdate: DateTime
  employee: Employee
  project: Project
}

type Project {
  id: ID!
  projectcode: String
  projectname: String
  projectdetails: String
  clientId: Float
  client: Client
  employees: [Employee!]
  cost: Cost
  timesheets: [Timesheet!]
}

type Client {
  id: ID!
  clientname: String
  email: String
  mobile: String
  employee: Employee
  project: Project
}

type Employee {
  id: ID!
  employeeid: String
  mobile: String
  email: String
  designation: String
  projectId: Float
  clientId: Float
  timesheetId: Float
  client: Client
  project: Project
  timesheet: Timesheet
}

type Query {
  alluser: [User!]!
  user(id: String!): User!
  findUserByEmail(email: String!): User!
  findUserByMobile(mobile: String!): User!
  allrole: [Role!]!
  role(id: Int!): Role!
  findByRole(role: String!): Role!
  alluserrole: [UserRole!]!
  findAm: [UserRole!]!
  userrole(id: Int!): UserRole!
  allemployee: [Employee!]!
  oneemployee(id: Int!): Employee!
  allclient: [Client!]!
  client(id: Int!): Client!
  allproject: [Project!]!
  oneproject(id: Int!): Project!
  cost(id: Int!): Cost!
  alltimesheet: [Timesheet!]!
  onetimesheet(id: Int!): Timesheet!
}

type Mutation {
  login(login: LoginInput!): Jwt!
  forgotpassword(forgot: ForgotDto!): User!
  createUser(createUserInput: CreateUserInput!): User!
  updateUser(updateUserInput: UpdateUserInput!): User!
  removeUser(id: String!): User!
  updatePassword(updateUserInput: UpdateUserInput!): User!
  createRole(createRoleInput: CreateRoleInput!): Role!
  updateRole(updateRoleInput: UpdateRoleInput!): Role!
  removeRole(id: Int!): Role!
  createUserRole(createUserInput: [CreateUserRoleInput!]!): [UserRole!]!
  updateUserRole(updateUserRoleInput: UpdateUserRoleInput!): UserRole!
  removeUserRole(id: Int!): UserRole!
  createEmployee(createEmployeeInput: CreateEmployeeInput!): Employee!
  updateEmployee(updateEmployeeInput: UpdateEmployeeInput!): Employee!
  removeEmployee(id: Int!): Employee!
  createClient(createClientInput: CreateClientInput!): Client!
  updateClient(updateClientInput: UpdateClientInput!): Client!
  removeClient(id: Int!): Client!
  createProject(createProjectInput: CreateProjectInput!): Project!
  updateProject(updateProjectInput: UpdateProjectInput!): Project!
  removeProject(id: Int!): Project!
  createCost(createCostInput: CreateCostInput!): Cost!
  updateCost(updateCostInput: UpdateCostInput!): Cost!
  removeCost(id: Int!): Cost!
  createTimesheet(createTimesheetInput: CreateTimesheetInput!): Timesheet!
  updateTimesheet(updateTimesheetInput: UpdateTimesheetInput!): Timesheet!
  removeTimesheet(id: Int!): Timesheet!
}

input LoginInput {
  email: String!
  passwordhash: String!
}

input ForgotDto {
  email: String!
  userToken: String
  host1: String
}

input CreateUserInput {
  email: String!
  username: String!
  passwordhash: String
  mobile: String!
  profilepicture: String
  lastlogin: DateTime
  usertoken: String
  firsttimelogin: Boolean
  isactive: Boolean
}

input UpdateUserInput {
  email: String
  username: String
  passwordhash: String
  mobile: String
  profilepicture: String
  lastlogin: DateTime
  usertoken: String
  firsttimelogin: Boolean
  isactive: Boolean
  userid: String!
}

input CreateRoleInput {
  role: String!
  description: String
  createdBy: String
  updatedBy: String
  isActive: Boolean
}

input UpdateRoleInput {
  role: String
  description: String
  createdBy: String
  updatedBy: String
  isActive: Boolean
  id: Int!
}

input CreateUserRoleInput {
  roleid: Float!
  userid: String
  isdefault: Boolean
}

input UpdateUserRoleInput {
  roleid: Float
  userid: String
  isdefault: Boolean
  id: Int!
}

input CreateEmployeeInput {
  employeeid: String
  mobile: String
  email: String
}

input UpdateEmployeeInput {
  employeeid: String
  mobile: String
  email: String
  id: Int!
}

input CreateClientInput {
  clientname: String
  email: String
  mobile: String
}

input UpdateClientInput {
  clientname: String
  email: String
  mobile: String
  id: Int!
}

input CreateProjectInput {
  projectcode: String
  projectname: String
  projectdetails: String
  clientId: Float
}

input UpdateProjectInput {
  projectcode: String
  projectname: String
  projectdetails: String
  clientId: Float
  id: Int!
}

input CreateCostInput {
  paidamount: Float
  paiddate: DateTime
}

input UpdateCostInput {
  paidamount: Float
  paiddate: DateTime
  id: Int!
}

input CreateTimesheetInput {
  workinghours: Float
  workingdate: DateTime
}

input UpdateTimesheetInput {
  workinghours: Float
  workingdate: DateTime
  id: Int!
}